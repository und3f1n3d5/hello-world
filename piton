from itertools import product

import pygame
from pygame import Surface

from src.ai import AI, PositionEvaluation
from src.boardstate import BoardState
AI_color = -1
P_color = 1


def draw_board(screen: Surface, pos_x: int, pos_y: int, elem_size: int, board: BoardState):
    dark = (0, 0, 0)
    white = (200, 200, 200)

    for y, x in product(range(9), range(9)):
        color = white if (x + y) % 2 == 0 else dark
        position = pos_x + x * elem_size, pos_y + y * elem_size, elem_size, elem_size
        if y < 9 and x < 9:
            pygame.draw.rect(screen, color, position)
        else:
            board.board[y, x] = -3

        figure = board.board[y, x]

        if figure == 0:
            continue

        if figure > 0:
            figure_color = 255, 255, 255
        else:
            figure_color = 100, 100, 100
        r = elem_size // 2 - 10

        pygame.draw.circle(screen, figure_color, (position[0] + elem_size // 2, position[1] + elem_size // 2), r)
        if abs(figure) == 2:
            r = 5
            negative_color = [255 - e for e in figure_color]
            pygame.draw.circle(screen, negative_color, (position[0] + elem_size // 2, position[1] + elem_size // 2), r)


def game_loop(screen: Surface, board: BoardState, ai: AI):
    grid_size = screen.get_size()[0] // 8

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return

            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                mouse_click_position = event.pos

            if event.type == pygame.MOUSEBUTTONUP and event.button == 1 and board.current_player == P_color:
                new_x, new_y = [p // grid_size for p in event.pos]
                old_x, old_y = [p // grid_size for p in mouse_click_position]

                k = False
                for x in range(8):
                    for y in range(8):
                        if board.current_player == board.board[y, x]:
                            board.get_moves(x, y)
                            if len(board.moves) > 0:
                                k = True
                                break
                    if k:
                        break
                board.get_moves(old_x, old_y)
                if not k or len(board.moves) > 0:
                    if len(board.moves) > 0:
                        print('Fuck')
                        new_board = board.eat_up(old_x, old_y, new_x, new_y)
                        if new_board is not None:
                            board = new_board
                            board.get_moves(new_x, new_y)
                            if len(board.moves) == 0:
                                print('Change')
                                board.change_player()
                    else:
                        print(board.current_player)
                        new_board = board.do_move(old_x, old_y, new_x, new_y)
                        if new_board is not None:
                            board = new_board
                            print('here')
                            board.change_player()

            if event.type == pygame.MOUSEBUTTONUP and event.button == 3:
                x, y = [p // grid_size for p in event.pos]
                board.board[y, x] = (board.board[y, x] + 1 + 2) % 5 - 2  # change figure

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    board = board.inverted()

                if event.key == pygame.K_SPACE and board.current_player == AI_color:
                    if board.current_player == AI_color:
                        if board.is_game_finished:
                            win = board.get_winner
                            if win == P_color:
                                print("You win!")
                                return
                            else:
                                print("You lose!")
                                return
                        new_board = ai.next_move(board)
                        if new_board is not None:
                            board = new_board
                            board.change_player()

        draw_board(screen, 0, 0, grid_size, board)
        pygame.display.flip()


pygame.init()

screen: Surface = pygame.display.set_mode([512, 512])
ai = AI(PositionEvaluation(), search_depth=4)

game_loop(screen, BoardState.initial_state(), ai)

pygame.quit()







from typing import Optional

from .boardstate import BoardState


class PositionEvaluation:
    def __call__(self, board: BoardState) -> float:
        value = 0
        for x in range(8):
            for y in range(8):
                if board.current_player * board.board[y, x] > 0:
                    value += abs(board.board[y, x])
        return value


class AI:
    def __init__(self, position_evaluation: PositionEvaluation, search_depth: int):
        self.position_evaluation: PositionEvaluation = position_evaluation
        self.depth: int = search_depth

    def next_move(self, board: BoardState) -> Optional[BoardState]:
        moves = board.get_possible_moves()
        if len(moves) == 0:
            return None
        best_move = moves[0]
        return best_move
        #return max(moves, key=lambda b: self.position_evaluation(b) * b.current_player)

















import numpy as np
from typing import Optional, List

BDAME = -2
WDAME = 2
BLACK = -1
WHITE = 1


class BoardState:
    moves = []
    to_eat = [[], [], [], []]
    ai_bites = []

    def __init__(self, board: np.ndarray, current_player: int = 1):
        self.board: np.ndarray = board
        self.current_player: int = current_player

    def change_player(self):
        self.current_player *= -1

    def inverted(self) -> 'BoardState':
        return BoardState(board=self.board[::-1, ::-1] * -1, current_player=self.current_player * -1)

    def copy(self) -> 'BoardState':
        return BoardState(self.board.copy(), self.current_player)

    def get_moves(self, x, y):
        self.moves = []
        self.to_eat = [[], [], [], []]
        if abs(self.board[y, x]) == 1:
            i = 2
            if y + i < 8 and x + i < 8 and self.board[y + 1, x + 1] * self.current_player < 0 and self.board[
                y + 2, x + 2] == 0:
                self.moves.append([y + 2, x + 2])
                self.to_eat[0] = [y + 1, x + 1]
            elif y - i > -1 and x + i < 8 and self.board[y - 1, x + 1] * self.current_player < 0 and self.board[
                y - 2, x + 2] == 0:
                self.moves.append([y - 2, x + 2])
                self.to_eat[1] = [y - 1, x + 1]
            elif y + i < 8 and x - i > -1 and self.board[y + 1, x - 1] * self.current_player < 0 and self.board[
                y + 2, x - 2] == 0:
                self.moves.append([y + 2, x - 2])
                self.to_eat[3] = [y + 1, x - 1]
            elif y - i > -1 and x - i > -1 and self.board[y - 1, x - 1] * self.current_player < 0 and self.board[
                y - 2, x - 2] == 0:
                self.moves.append([y - 2, x - 2])
                self.to_eat[2] = [y - 1, x - 1]
        else:
            i = 1
            while y + i < 8 and x + i < 8 and self.board[y + i, x + i] * self.current_player >= 0 and self.board[
                y + i, x + i] == 0:
                i += 1
            if y + i < 8 and x + i < 8 and self.board[y + i, x + i] * self.current_player < 0 and self.board[
                y + i + 1, x + i + 1] == 0:
                self.moves.append([y + i + 1, x + i + 1])
                self.to_eat[0] = [y + i, x + i]
            i = 1
            while y - i > -1 and x + i < 8 and self.board[y - i, x + i] * self.current_player >= 0 and self.board[
                y - i, x + i] == 0:
                i += 1
            if y - i > -1 and x + i < 8 and self.board[y - i, x + i] * self.current_player < 0 and self.board[
                y - i - 1, x + i + 1] == 0:
                self.moves.append([y - i - 1, x + i + 1])
                self.to_eat[1] = [y - i, x + i]
            i = 1
            while y + i < 8 and x - i > -1 and self.board[y + i, x - i] * self.current_player >= 0 and self.board[
                y + i, x - i] == 0:
                i += 1
            if y + i < 8 and x - i > -1 and self.board[y + i, x - i] * self.current_player < 0 and self.board[
                y + i + 1, x - i - 1] == 0:
                self.moves.append([y + i + 1, x - i - 1])
                self.to_eat[3] = [y + i, x - i]
            i = 1
            while y - i > -1 and x - i > -1 and self.board[y - i, x - i] * self.current_player >= 0 and self.board[
                y - i, x - i] == 0:
                i += 1
            if y - i > -1 and x - i > -1 and self.board[y - i, x - i] * self.current_player < 0 and self.board[
                y - i - 1, x - i - 1]:
                self.moves.append([y - i - 1, x - i - 1])
                self.to_eat[2] = [y - i, x - i]

    def eat_up(self, from_x, from_y, to_x, to_y):
        if [to_y, to_x] in self.moves:
            result = self.copy()
            result.board[to_y, to_x] = result.board[from_y, from_x]
            if self.board[from_y, from_x] == WHITE and to_y == 0:
                result.board[to_y, to_x] += 1
            if self.board[from_y, from_x] == BLACK and to_y == 7:
                result.board[to_y, to_x] -= 1
            result.board[from_y, from_x] = 0
            if from_y < to_y and from_x < to_x:
                result.board[self.to_eat[0][0], self.to_eat[0][1]] = 0
            if from_y > to_y and from_x < to_x:
                result.board[self.to_eat[1][0], self.to_eat[1][1]] = 0
            if from_y < to_y and from_x > to_x:
                result.board[self.to_eat[3][0], self.to_eat[3][1]] = 0
            if from_y > to_y and from_x > to_x:
                result.board[self.to_eat[2][0], self.to_eat[2][1]] = 0
            return result
        else:
            return None

    def do_move(self, from_x, from_y, to_x, to_y) -> Optional['BoardState']:

        if from_x == to_x and from_y == to_y:
            return None  # invalid move

        if (to_x + to_y) % 2 == 0:
            return None

        if self.board[to_y, to_x] != 0:
            return None

        if self.board[from_y, from_x] == WDAME or self.board[from_y, from_x] == BDAME:
            result = self.copy()
            if from_y < to_y and from_x < to_x:
                x, y = from_x, from_y
                while x != to_x:
                    x += 1
                    y += 1
                    if self.board[y, x] != 0:
                        return None
            if from_y > to_y and from_x < to_x:
                x, y = from_x, from_y
                while x != to_x:
                    x += 1
                    y -= 1
                    if self.board[y, x] != 0:
                        return None
            if from_y < to_y and from_x > to_x:
                x, y = from_x, from_y
                while x != to_x:
                    x -= 1
                    y += 1
                    if self.board[y, x] != 0:
                        return None
            if from_y > to_y and from_x > to_x:
                x, y = from_x, from_y
                while x != to_x:
                    x -= 1
                    y -= 1
                    if self.board[y, x] != 0:
                        return None
            result.board[to_y, to_x] = result.board[from_y, from_x]
            result.board[from_y, from_x] = 0
        else:
            if self.board[from_y, from_x] == WHITE and self.current_player == 1:
                if to_y == from_y - 1 and abs(to_x - from_x) <= 1:
                    result = self.copy()
                    result.board[to_y, to_x] = result.board[from_y, from_x]
                    if to_y == 0:
                        result.board[to_y, to_x] += 1
                    result.board[from_y, from_x] = 0
                else:
                    return None
            elif self.board[from_y, from_x] == BLACK and self.current_player == -1:
                if to_y == from_y + 1 and abs(to_x - from_x) <= 1:
                    result = self.copy()
                    result.board[to_y, to_x] = result.board[from_y, from_x]
                    if to_y == 7:
                        result.board[to_y, to_x] -= 1
                    result.board[from_y, from_x] = 0
                else:
                    return None
            else:
                return None

        return result

    def ai_move(self, x, y):
        just_moves = []
        if self.board[y, x] == BLACK and self.current_player == -1:
            if x + 1 < 8 and y + 1 < 8 and self.board[y + 1, x + 1] == 0:
                state = self.copy()
                state.board[y + 1, x + 1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
            if x - 1 > -1 and y + 1 < 8 and self.board[y + 1, x - 1] == 0:
                state = self.copy()
                state.board[y + 1, x - 1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
        if self.board[y, x] == WHITE and self.current_player == 1:
            if x + 1 < 8 and y - 1 > -1 and self.board[y - 1, x + 1] == 0:
                state = self.copy()
                state.board[y - 1, x + 1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
            if x - 1 > -1 and y - 1 > -1 and self.board[y - 1, x - 1] == 0:
                state = self.copy()
                state.board[y - 1, x - 1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
        if (self.board[y, x] == WDAME and self.current_player == 1) or (
                self.board[y, x] == BDAME and self.current_player == -1):
            x1 = x
            y1 = y
            while x1 + 1 < 8 and y1 + 1 < 8 and self.board[y1, x1] == 0:
                x1 += 1
                y1 += 1
                state = self.copy()
                state.board[y1, x1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
            while x1 - 1 > -1 and y1 + 1 < 8 and self.board[y1, x1] == 0:
                x1 -= 1
                y1 += 1
                state = self.copy()
                state.board[y1, x1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
            while x1 + 1 < 8 and y1 - 1 > -1 and self.board[y1, x1] == 0:
                x1 += 1
                y1 -= 1
                state = self.copy()
                state.board[y1, x1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
            while x1 - 1 > -1 and y1 - 1 > -1 and self.board[y1, x1] == 0:
                x1 -= 1
                y1 -= 1
                state = self.copy()
                state.board[y1, x1] = state.board[y, x]
                state.board[y, x] = 0
                just_moves.append(state)
        return just_moves

    def ai_eat(self, x, y):
        if (self.board[y, x] == WHITE and self.current_player == 1) or (
                self.board[y, x] == BLACK and self.current_player == -1):
            m = True
            if x + 2 < 8 and y + 2 < 8 and self.board[y + 1, x + 1] * self.current_player > 0 and self.board[
                y + 2, x + 2] == 0:
                m = False
                self.board[y + 2, x + 2] = self.board[y, x]
                self.board[y, x] = 0
                k = self.board[y + 1, x + 1]
                self.board[y + 1, x + 1] = 0
                self.ai_eat(x + 2, y + 2)
                self.board[y, x] = self.board[y + 2, x + 2]
                self.board[y + 1, x + 1] = k
                self.board[y + 2, x + 2] = 0
            if x + 2 < 8 and y - 2 > -1 and self.board[y - 1, x + 1] * self.current_player > 0 and self.board[
                y - 2, x + 2] == 0:
                m = False
                self.board[y - 2, x + 2] = self.board[y, x]
                self.board[y, x] = 0
                k = self.board[y - 1, x + 1]
                self.board[y - 1, x + 1] = 0
                self.ai_eat(x + 2, y - 2)
                self.board[y - 1, x + 1] = k
                self.board[y, x] = self.board[y - 2, x + 2]
                self.board[y - 2, x + 2] = 0
            if x - 2 > -1 and y + 2 < 8 and self.board[y + 1, x - 1] * self.current_player > 0 and self.board[
                y + 2, x - 2] == 0:
                m = False
                self.board[y + 2, x + 2] = self.board[y, x]
                self.board[y, x] = 0
                k = self.board[y + 1, x - 1]
                self.board[y + 1, x - 1] = 0
                self.ai_eat(x - 2, y + 2)
                self.board[y + 1, x - 1] = k
                self.board[y, x] = self.board[y + 2, x - 2]
                self.board[y + 2, x - 2] = 0
            if x - 2 > -1 and y - 2 > -1 and self.board[y - 1, x - 1] * self.current_player > 0 and self.board[
                y - 2, x - 2] == 0:
                m = False
                self.board[y - 2, x - 2] = self.board[y, x]
                self.board[y, x] = 0
                k = self.board[y - 1, x - 1]
                self.board[y - 1, x - 1] = 0
                self.ai_eat(x - 2, y - 2)
                self.board[y - 1, x - 1] = k
                self.board[y, x] = self.board[y - 2, x - 2]
                self.board[y - 2, x - 2] = 0
            if m:
                self.ai_bites.append(self.board)
        if (self.board[y, x] == WDAME and self.current_player == 1) or (
                self.board[y, x] == BDAME and self.current_player == -1):
            m = True
            i = 1
            while x + i < 8 and y + i < 8 and self.board[y + i, x + i] == 0:
                i += 1
            if x + i < 7 and y + i < 7 and self.board[y + i, x + i] * self.current_player > 0:
                if self.board[y + i + 1, x + i + 1] == 0:
                    m = False
                    self.board[y + i + 1, x + i + 1] = self.board[y, x]
                    self.board[y, x] = 0
                    k = self.board[y + i, x + i]
                    self.board[y + i, x + i] = 0
                    self.ai_eat(y + i + 1, x + i + 1)
                    self.board[y, x] = self.board[y + i + 1, x + i + 1]
                    self.board[y + i, x + i] = k
                    self.board[y + i + 1, x + i + 1] = 0
            i = 1
            while x - i > -1 and y + i < 8 and self.board[y + i, x - i] == 0:
                i += 1
            if x - i > 0 and y + i < 7 and self.board[y + i, x - i] * self.current_player > 0:
                if self.board[y + i + 1, x - i - 1] == 0:
                    m = False
                    self.board[y + i + 1, x - i - 1] = self.board[y, x]
                    self.board[y, x] = 0
                    k = self.board[y + i, x - i]
                    self.board[y + i, x - i] = 0
                    self.ai_eat(y + i + 1, x - i - 1)
                    self.board[y, x] = self.board[y + i + 1, x - i - 1]
                    self.board[y + i, x - i] = k
                    self.board[y + i + 1, x - i - 1] = 0
            i = 1
            while x + i < 8 and y - i > -1 and self.board[y - i, x + i] == 0:
                i += 1
            if x + i < 7 and y - i > 0 and self.board[y - i, x + i] * self.current_player > 0:
                if self.board[y - i - 1, x + i + 1] == 0:
                    m = False
                    self.board[y - i - 1, x + i + 1] = self.board[y, x]
                    self.board[y, x] = 0
                    k = self.board[y - i, x + i]
                    self.board[y - i, x + i] = 0
                    self.ai_eat(y - i - 1, x + i + 1)
                    self.board[y, x] = self.board[y - i - 1, x + i + 1]
                    self.board[y - i, x + i] = k
                    self.board[y - i - 1, x + i + 1] = 0
            i = 1
            while x - i > -1 and y - i > -1 and self.board[y - i, x - i] == 0:
                i += 1
            if x - i > 0 and y - i > 0 and self.board[y - i, x - i] * self.current_player > 0:
                if self.board[y - i - 1, x - i - 1] == 0:
                    m = False
                    self.board[y - i - 1, x - i - 1] = self.board[y, x]
                    self.board[y, x] = 0
                    k = self.board[y - i, x - i]
                    self.board[y - i, x - i] = 0
                    self.ai_eat(y - i - 1, x - i - 1)
                    self.board[y, x] = self.board[y - i - 1, x - i - 1]
                    self.board[y - i, x - i] = k
                    self.board[y - i - 1, x - i - 1] = 0
            if m:
                self.ai_bites.append(self.board)

    def get_possible_moves(self) -> List['BoardState']:
        just_moves = []
        self.ai_bites = []
        for x in range(8):
            for y in range(8):
                if self.board[y, x] != 0:
                    self.ai_eat(x, y)
                if len(self.ai_bites) == 0:
                    j_moves = self.ai_move(x, y)
                    for i in j_moves:
                        just_moves.append(i)
        if len(self.ai_bites) == 0:
            return just_moves
        return self.ai_bites

    @property
    def is_game_finished(self) -> bool:
        res = False
        k = self.get_possible_moves()
        res = (len(k) == 0)
        if not res:
            self.current_player *= -1
            res = (len(self.get_possible_moves()) == 0)
            self.current_player *= -1
        return res

    @property
    def get_winner(self) -> Optional[int]:
        res = (len(self.get_possible_moves()) == 0)
        if res:
            return self.current_player * -1
        return self.current_player

    @staticmethod
    def initial_state() -> 'BoardState':
        board = np.zeros(shape=(9, 9), dtype=np.int8)
        # дамка = 2, шашка = 1, черные *= -1
        board[7, 0] = 1
        board[6, 1] = 1
        board[5, 2] = 1
        board[7, 2] = 1
        board[6, 3] = 1
        board[5, 4] = 1
        board[7, 4] = 1
        board[6, 5] = 1
        board[5, 6] = 1
        board[7, 6] = 1
        board[6, 7] = 1
        board[5, 0] = 1

        board[0, 1] = -1
        board[0, 3] = -1
        board[0, 5] = -1
        board[0, 7] = -1
        board[1, 2] = -1
        board[1, 4] = -1
        board[1, 6] = -1
        board[1, 0] = -1
        board[2, 1] = -1
        board[2, 3] = -1
        board[2, 5] = -1
        board[2, 7] = -1

        return BoardState(board, 1)
